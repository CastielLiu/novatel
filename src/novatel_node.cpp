/*
 * The MIT License (MIT)
 * Copyright (c) 2012 William Woodall <wjwwood@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 * DEALINGS IN THE SOFTWARE.
 */

#include <iostream>
#include <sstream>
#include <cmath>

#include <ros/ros.h>
#include <string>

#ifdef WIN32
 #ifdef DELETE
 // ach, windows.h polluting everything again,
 // clashes with autogenerated visualization_msgs/Marker.h
 #undef DELETE
 #endif
#endif
#include "nav_msgs/Odometry.h"

#include "novatel/novatel.h"
using namespace novatel;

// Logging system message handlers
void handleInfoMessages(const std::string &msg) {ROS_INFO("%s",msg.c_str());}
void handleWarningMessages(const std::string &msg) {ROS_WARN("%s",msg.c_str());}
void handleErrorMessages(const std::string &msg) {ROS_ERROR("%s",msg.c_str());}
void handleDebugMessages(const std::string &msg) {ROS_DEBUG("%s",msg.c_str());}


// ROS Node class
class NovatelNode {
public:
  NovatelNode() : nh_("~"){


    // set up logging handlers
    gps_.setLogInfoCallback(handleInfoMessages);
    gps_.setLogWarningCallback(handleWarningMessages);
    gps_.setLogErrorCallback(handleErrorMessages);
    gps_.setLogDebugCallback(handleDebugMessages);

  }

  ~NovatelNode() {
    this->disconnect();
  }

  //void HandleEmData(EM61MK2Data &data) {
    // auxos_messages::EmDataStamped msg;
    // msg.header.stamp = ros::Time(data.timestamp);
    // msg.header.frame_id = "/em";

    // msg.em_name=em_name_;
    // msg.em_data.mode=data.mode;
    // msg.em_data.channel_1=data.chan1;
    // msg.em_data.channel_2=data.chan2;
    // msg.em_data.channel_3=data.chan3;
    // msg.em_data.channel_4=data.chan4;
    // msg.em_data.current=data.current;
    // msg.em_data.voltage=data.voltage;

    // em_publisher_.publish(msg);

  //}

  void run() {

    if (!this->getParameters())
      return;

    this->odom_publisher_ = nh_.advertise<nav_msgs::Odometry>(odom_topic_,0);

    //em_.setDataCallback(boost::bind(&EM61Node::HandleEmData, this, _1));
    gps_.Connect(port_,baudrate_);
    gps_.ConfigureLogs(log_commands_);

    ros::spin();

  } // function

protected:

  void disconnect() {
    //em_.stopReading();
    //em_.disconnect();
  }

  bool getParameters() {
    // Get the serial ports

    nh_.param("odom_topic", odom_topic_, std::string("gps_odom"));
    ROS_INFO_STREAM("Odom Topic: " << odom_topic_);

    nh_.param("port", port_, std::string("/dev/ttyUSB0"));
    ROS_INFO_STREAM("Port: " << port_);

    nh_.param("baudrate", baudrate_, 9600);
    ROS_INFO_STREAM("Baudrate: " << baudrate_);

    nh_.param("log_commands", log_commands_, std::string("BESTUTMB ONTIME 1.0"));
    ROS_INFO_STREAM("Log Commands: " << log_commands_);

    return true;
  }

  ////////////////////////////////////////////////////////////////
  // ROSNODE Members
  ////////////////////////////////////////////////////////////////
  ros::NodeHandle nh_;
  ros::Publisher odom_publisher_;
  ros::Publisher nav_sat_fix_publisher_;

  Novatel gps_;
  std::string odom_topic_;
  std::string port_;
  std::string log_commands_;
  int baudrate_;
  double poll_rate_;

};

int main(int argc, char **argv) {
  ros::init(argc, argv, "novatel_node");
  
  NovatelNode node;
  
  node.run();
  
  return 0;
}
